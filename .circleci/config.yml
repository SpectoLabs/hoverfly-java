version: 2

jobs:
  build-linux:
    docker:
      - image: cimg/openjdk:11.0
    working_directory: ~/hoverfly-java
    steps:
      - checkout
      - restore_cache:
          key: hoverfly-java-gradle-cache-
      - run:
          name: Install Python
          command: |
            sudo apt-get --allow-releaseinfo-change update && sudo apt-get install python-is-python3 -f
      - run:
          name: Run Tests
          command: |
            ./gradlew clean test jacocoTestReport
            bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: build/reports
          destination: reports
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
          key: hoverfly-java-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - hoverfly-java/

#  build-windows:
#    machine:
#      image: windows-server-2019
#      resource_class: windows.medium
#    working_directory: C:/hoverfly-java
#    steps:
#      - checkout
#      - run:
#          name: Set up Gradle Wrapper & Java
#          command: |
#            choco install -y openjdk11
#            set "JAVA_HOME=C:\Program Files\OpenJDK\openjdk-11"
#            set "PATH=%JAVA_HOME%\bin;%PATH%"
#            echo "JAVA_HOME is set to %JAVA_HOME%"
#      - run:
#          name: Run Tests
#          shell: cmd
#          command: ".\\gradlew.bat clean test jacocoTestReport"
#      - persist_to_workspace:
#          root: C:/hoverfly-java/
#          paths:
#            - ./

  deploy:
    docker:
      - image: cimg/openjdk:11.0
    working_directory: ~/hoverfly-java
    steps:
      - checkout
      - run:
          name: Config release dependencies
          command: |
             sudo apt-get update && sudo apt-get install gnupg2 -y
             git config core.filemode false
             mkdir ~/.gnupg
             echo 'use-agent' >> ~/.gnupg/gpg.conf
             echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
             echo 'allow-loopback-pinentry' >> ~/.gnupg/gpg-agent.conf
             echo RELOADAGENT | gpg-connect-agent
             chmod +x maven-release.sh
             echo ${GPG_PRIVATE_KEY} | base64 --decode -i | gpg2 --import --passphrase ${MAVEN_GPG_PASSPHRASE}
             gpg --export-secret-keys > ~/.gnupg/secring.gpg --passphrase ${MAVEN_GPG_PASSPHRASE}
      - run:
          name: Run Maven release
          command: ./maven-release.sh

workflows:
  version: 2
  build:
    jobs:
      - build-linux
#      - build-windows
      - deploy:
          requires:
            - build-linux
#            - build-windows
          filters:
            branches:
              only: master
